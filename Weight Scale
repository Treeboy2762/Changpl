#include "HX711.h"
#include <Keypad.h>
#define DOUT 11 // 로드셀
#define CLK  12 // 로드셀

HX711 scale;

float calibration_factor = 390; // calibration

int numReadings = 6;
float readings[6];   
int readIndex = 0;       
float total = 0;       
float average = 0;            
float targetWeight = 0;
float difference = 0;
int count = 0;
char customKey = 1;

float firstWarn = 0;
float secondWarn = 0;
float thirdWarn = 0;
    
const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
//define the cymbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
  {'1','2','3',' '},
  {'4','5','6',' '},
  {'7','8','9','C'},
  {' ','0','#','D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; // 행(Raw)가 연결된 아두이노 핀 번호
byte colPins[COLS] = {5, 4, 3, 2}; // 열(column)가 연결된 아두이노 핀 번호

// 키패드 초기화 작업
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 


int speaker = 13; // 스피커 핀 번호


void setup() {
    Serial.begin(9600);
  
  for (int thisReading = 0; thisReading < numReadings; thisReading++) {
    readings[thisReading] = 0;
  }
  Serial.println("Readings Initialized.");

  String result = "";
  result = getInput();

  targetWeight = result.toFloat();
  firstWarn = targetWeight * 0.2; // 20%로 설정
  secondWarn = targetWeight * 0.1;
  thirdWarn = targetWeight * 0.05;
  
  Serial.print("Target weight set to ");
  Serial.print(targetWeight);
  Serial.println("g.");

  pinMode(speaker, OUTPUT);
  Serial.println("Speaker setup complete.");
  
  Serial.println("Entering scale mode.");
  scale.begin(DOUT, CLK);
  scale.set_scale();
  scale.tare(); // 영점맞추기 작업

  long zero_factor = scale.read_average();
  Serial.print("Zero factor: ");
  Serial.println(zero_factor);
  
}

void loop() {
  
  scale.set_scale(calibration_factor); // 구경 맞추기
  
  total = total - readings[readIndex]; // 센서값 입력
  readings[readIndex] = scale.get_units();
  total = total + readings[readIndex];
  readIndex = readIndex + 1;
  
  if (readIndex >= numReadings) {
    // 꽉차면 다시 0부터시작
    readIndex = 0;
  }

  average = total / numReadings;
  difference = targetWeight - average;
  Serial.print("Average: ");
  Serial.print(average);
  Serial.print(" g. "); 
  Serial.print("Difference: ");
  Serial.print(difference);
  Serial.print("Abs difference: ");
  Serial.print(abs(difference));
  Serial.println(); // 무게 확인용 출력

  if (abs(difference) < 1) { // 초 근접시 멜로디 재생
      tone(speaker, 164, 500);
      delay(200);
      tone(speaker, 220, 500);
      delay(200);
      tone(speaker, 277, 500);
      delay(200);
      tone(speaker, 329, 500);
      delay(200);
  }
  else if(difference < -1 * thirdWarn) { // 초과시 경고음
      tone(speaker, 500, 100);
  }
  else if(difference < thirdWarn) { // 5% 이내
      tone(speaker, 500, 10);
  }
  else if(difference < secondWarn) { // 10% 이내
    count = count + 1;
    if (count > 1) {
      tone(speaker, 500, 10);
      count = 0;
    }
  }
  else if(difference < firstWarn) { // 20% 
    count = count + 1;
    if (count > 2) {
      tone(speaker, 500, 10);
      count = 0;
    }
  }

  if(customKeypad.getKey() == 'C') // 무게를 다 쟀을때 C로 타겟무게 재설정 가능
  {
      targetWeight = getInput().toFloat(); 
  }
}

String getInput() {
  Serial.print("Input: ");
  String result = "";
  while (true) {
      customKey = customKeypad.waitForKey();
      if (customKey == '#') { // 제일 뒤 숫자 제거
        if (result != "") {
          result = result.substring(0, result.length()-1);
        } 
        Serial.println();
        Serial.print("Input: ");
        Serial.print(result);
      }
      else if (customKey == 'C') { // 초기화
        Serial.println();
        Serial.println("Input cleared.");
        Serial.print("Input: ");
        result = "";
      }
      else if (customKey == 'D') { // 완료
        Serial.print("\n");
        break;
      }
      else if (customKey != 'X') { // 
        result += customKey;
        Serial.print(customKey);
      }
    }
  return result;
}
